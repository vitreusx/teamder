{"version":3,"sources":["src/serviceWorkerRegistration.js","App.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","LogBox","ignoreLogs","initializeApp","apiKey","authDomain","projectId","storageBucket","databaseURL","messagingSenderId","appId","measurementId","db","getFirestore","signIn","createAsyncThunk","payload","thunkAPI","a","async","username","getDoc","doc","exists","Error","signOut","createAction","userDoc","joined","managed","bio","setDoc","authSlice","createSlice","name","initialState","signedIn","reducers","extraReducers","builder","addCase","_","fulfilled","action","setCurProject","setSelTeam","projectSlice","curProject","selTeam","project","team","store","configureStore","reducer","auth","devTools","NotSignedInTab","createBottomTabNavigator","NotSignedInNavigator","Navigator","initialRouteName","Screen","component","SignInScreen","options","title","RegisterScreen","route","navigation","useState","setUsername","View","style","flex","justifyContent","alignItems","TextInput","value","onChangeText","placeholder","Button","disabled","onPress","dispatch","unwrap","useSelector","navigate","SignedInStackNav","createNativeStackNavigator","SignedInNavigator","screenOptions","headerShown","SignedInTabs","JoinProjectScreen","CreateProjectScreen","ProjectScreen","SignedInTabNav","JoinedScreen","ManagedScreen","AccountScreen","useForceUpdate","counter","setCounter","useUserData","updateValue","forceUpdate","userData","setUserData","useEffect","ref","data","useProjectData","projectData","setProjectData","projectDoc","joinedProjects","setJoinedProjects","header","flexDirection","useLayoutEffect","setOptions","headerRight","map","FlatList","renderItem","item","bottomDivider","Content","Text","Chevron","keyExtractor","managedProjects","setManagedProjects","projects","push","setBio","merge","JoinProjectStack","JoinProjectInnerScreen","setName","projectRef","userRef","currentMembers","members","concat","currentJoined","goBack","CreateProjectStack","CreateProjectInnerScreen","skills","admin","currentManaged","ProjectScreenNav","isAdmin","AdminViewScreen","UserViewScreen","AdminViewNav","AV_TabsScreen","CreateTeamScreen","AV_TeamScreen","AddSkillScreen","AdminViewTab","AV_MembersScreen","AV_TeamsScreen","AV_AllSkillsScreen","projectName","teams","setTeams","collection","getDocs","res","teams_","docs","setSkills","CreateTeamNav","CreateTeamInnerScreen","teamName","setTeamName","numMembers","setNumMembers","parseInt","AV_TeamTab","AV_Team_MembersScreen","AV_Team_InfoScreen","teamData","setTeamData","teamDoc","useTeamData","AddSkillStack","AddSkillInnerScreen","UserViewTab","UV_TeamScreen","UV_SwipeScreen","UV_SkillsScreen","filter","x","membersInfo","setMembersInfo","fellowUserDoc","fellowUserData","cards","renderCard","info","testID","verticalSwipe","checked","setChecked","forceUpdateV","checked_","index","CheckBox","extraData","Root","NavigationContainer","App","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/app.1c7aa6a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  const isEnvProduction = process.env.NODE_ENV === \"production\";\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { Provider } from \"react-redux\";\nimport { configureStore, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\nimport {\n  NativeStackScreenProps,\n  createNativeStackNavigator,\n} from \"@react-navigation/native-stack\";\nimport { initializeApp, FirebaseOptions } from \"firebase/app\";\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  getDocs,\n  collection,\n} from \"firebase/firestore\";\nimport {\n  View,\n  Text,\n  Button,\n  TextInput,\n  FlatList,\n  ListRenderItem,\n} from \"react-native\";\nimport {\n  NavigationContainer,\n  NavigatorScreenParams,\n} from \"@react-navigation/native\";\nimport { CompositeScreenProps } from \"@react-navigation/core\";\nimport {\n  createBottomTabNavigator,\n  BottomTabScreenProps,\n} from \"@react-navigation/bottom-tabs\";\nimport { LogBox } from \"react-native\";\nimport { ListItem } from \"react-native-elements\";\nimport Swiper from \"react-native-deck-swiper\";\n\nimport * as serviceWorkerRegistration from \"./src/serviceWorkerRegistration\";\n\nLogBox.ignoreLogs([\"Setting a timer\"]);\n\nconst firebaseConfig: FirebaseOptions = {\n  apiKey: \"AIzaSyDxmqZR7V9TjEcGlaWgtZVvr0zqghDA5_c\",\n  authDomain: \"teamder-8c70d.firebaseapp.com\",\n  projectId: \"teamder-8c70d\",\n  storageBucket: \"teamder-8c70d.appspot.com\",\n  databaseURL: \"https://teamder-8c70d.firebaseio.com\",\n  messagingSenderId: \"68783010094\",\n  appId: \"1:68783010094:web:6f51644c46a23b32bf4abf\",\n  measurementId: \"G-RWJVW6KS40\",\n};\n\ninitializeApp(firebaseConfig);\nexport const db = getFirestore();\n\ninterface AuthState {\n  username: string | null;\n  signedIn: boolean;\n}\n\nconst signIn = createAsyncThunk(\"signIn\", async (payload: string, thunkAPI) => {\n  const username = payload;\n  const userDoc = await getDoc(doc(db, \"users\", username));\n  if (!userDoc.exists()) {\n    throw new Error(`User with an username ${username} not found!`);\n  } else {\n    return username;\n  }\n});\n\nconst signOut = createAction<void>(\"signOut\");\nconst register = createAsyncThunk(\n  \"register\",\n  async (payload: string, thunkAPI) => {\n    const username = payload;\n    const userDoc = { username: username, joined: [], managed: [], bio: \"\" };\n    await setDoc(doc(db, \"users\", username), userDoc);\n    return username;\n  }\n);\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: { username: null, signedIn: false } as AuthState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(signOut, (state, _) => {\n        state.username = null;\n        state.signedIn = false;\n      })\n      .addCase(signIn.fulfilled, (state, action) => {\n        const username = action.payload;\n        state.username = username;\n        state.signedIn = true;\n      });\n  },\n});\n\nconst setCurProject = createAction<string>(\"setCurProject\");\nconst setSelTeam = createAction<string>(\"setSelTeam\");\n\ninterface ProjectState {\n  curProject: string | null;\n  selTeam: string | null;\n}\n\nconst projectSlice = createSlice({\n  name: \"project\",\n  initialState: { curProject: null, selTeam: null } as ProjectState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(setCurProject, (state, action) => {\n        const project = action.payload;\n        state.curProject = project;\n      })\n      .addCase(setSelTeam, (state, action) => {\n        const team = action.payload;\n        state.selTeam = team;\n      });\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    auth: authSlice.reducer,\n    project: projectSlice.reducer,\n  },\n  devTools: true,\n});\ntype State = ReturnType<typeof store.getState>;\n\ntype NotSignedInParamList = {\n  SignIn: undefined;\n  Register: undefined;\n};\n\ntype SignInProps = BottomTabScreenProps<NotSignedInParamList, \"SignIn\">;\n\ntype RegisterProps = BottomTabScreenProps<NotSignedInParamList, \"Register\">;\n\nconst NotSignedInTab = createBottomTabNavigator();\n\nconst NotSignedInNavigator = () => {\n  return (\n    <NotSignedInTab.Navigator initialRouteName=\"SignIn\">\n      <NotSignedInTab.Screen\n        name=\"SignIn\"\n        component={SignInScreen}\n        options={{\n          title: \"Sign in\",\n        }}\n      />\n      <NotSignedInTab.Screen\n        name=\"Register\"\n        component={RegisterScreen}\n        options={{\n          title: \"Register\",\n        }}\n      />\n    </NotSignedInTab.Navigator>\n  );\n};\n\nconst SignInScreen = ({ route, navigation }: SignInProps) => {\n  const [username, setUsername] = useState(\"\");\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput\n        value={username}\n        onChangeText={setUsername}\n        placeholder=\"Username\"\n      />\n      <Button\n        title=\"Sign in\"\n        disabled={username === \"\"}\n        onPress={async () => {\n          try {\n            await store.dispatch(signIn(username)).unwrap();\n          } catch (e) {\n            setUsername(\"\");\n          }\n        }}\n      />\n    </View>\n  );\n};\n\nconst RegisterScreen = ({ route, navigation }: RegisterProps) => {\n  const [username, setUsername] = useState(\"\");\n  const state = useSelector((state: State) => state);\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput\n        value={username}\n        onChangeText={setUsername}\n        placeholder=\"Username\"\n      />\n      <Button\n        title=\"Register\"\n        disabled={username === \"\"}\n        onPress={async () => {\n          setUsername(\"\");\n          await store.dispatch(register(username));\n          navigation.navigate(\"SignIn\");\n        }}\n      />\n    </View>\n  );\n};\n\ntype SignedInParamList = {\n  Tabs: NavigatorScreenParams<SignedInTabsParamList>;\n  CreateProject: undefined;\n  JoinProject: undefined;\n  Project: NavigatorScreenParams<ProjectParamList>;\n};\n\ntype SignedInTabsParamList = {\n  Joined: undefined;\n  Managed: undefined;\n  Account: undefined;\n};\n\ntype ProjectParamList = {\n  AdminView: NavigatorScreenParams<AdminViewParamList>;\n  UserView: NavigatorScreenParams<UserViewParamList>;\n};\n\ntype AdminViewParamList = {\n  AV_Tabs: NavigatorScreenParams<AV_TabsParamList>;\n  CreateTeam: undefined;\n  AV_Team: undefined;\n  AddSkill: undefined;\n};\n\ntype AV_TabsParamList = {\n  Members: undefined;\n  Teams: undefined;\n  AllSkills: undefined;\n};\n\ntype UserViewParamList = {\n  Team: undefined;\n  Swipe: undefined;\n  Skills: undefined;\n};\n\ntype TabsProps = NativeStackScreenProps<SignedInParamList, \"Tabs\">;\ntype CreateProjectProps = NativeStackScreenProps<\n  SignedInParamList,\n  \"CreateProject\"\n>;\ntype JoinProjectProps = NativeStackScreenProps<\n  SignedInParamList,\n  \"JoinProject\"\n>;\ntype ProjectProps = NativeStackScreenProps<SignedInParamList, \"Project\">;\n\ntype JoinedProps = CompositeScreenProps<\n  BottomTabScreenProps<SignedInTabsParamList, \"Joined\">,\n  TabsProps\n>;\ntype ManagedProps = CompositeScreenProps<\n  BottomTabScreenProps<SignedInTabsParamList, \"Managed\">,\n  TabsProps\n>;\ntype AccountProps = CompositeScreenProps<\n  BottomTabScreenProps<SignedInTabsParamList, \"Account\">,\n  TabsProps\n>;\n\ntype AdminViewProps = CompositeScreenProps<\n  NativeStackScreenProps<ProjectParamList, \"AdminView\">,\n  ProjectProps\n>;\ntype UserViewProps = CompositeScreenProps<\n  NativeStackScreenProps<ProjectParamList, \"UserView\">,\n  ProjectProps\n>;\n\ntype AV_TabsProps = CompositeScreenProps<\n  NativeStackScreenProps<AdminViewParamList, \"AV_Tabs\">,\n  AdminViewProps\n>;\ntype CreateTeamProps = CompositeScreenProps<\n  NativeStackScreenProps<AdminViewParamList, \"CreateTeam\">,\n  AdminViewProps\n>;\ntype AV_TeamProps = CompositeScreenProps<\n  NativeStackScreenProps<AdminViewParamList, \"AV_Team\">,\n  AdminViewProps\n>;\ntype AddSkillProps = CompositeScreenProps<\n  NativeStackScreenProps<AdminViewParamList, \"AddSkill\">,\n  AdminViewProps\n>;\n\ntype AV_MembersProps = CompositeScreenProps<\n  BottomTabScreenProps<AV_TabsParamList, \"Members\">,\n  AV_TabsProps\n>;\ntype AV_TeamsProps = CompositeScreenProps<\n  BottomTabScreenProps<AV_TabsParamList, \"Teams\">,\n  AV_TabsProps\n>;\ntype AV_AllSkillsProps = CompositeScreenProps<\n  BottomTabScreenProps<AV_TabsParamList, \"AllSkills\">,\n  AV_TabsProps\n>;\n\ntype UV_TeamProps = CompositeScreenProps<\n  BottomTabScreenProps<UserViewParamList, \"Skills\">,\n  UserViewProps\n>;\ntype UV_SwipeProps = CompositeScreenProps<\n  BottomTabScreenProps<UserViewParamList, \"Swipe\">,\n  UserViewProps\n>;\ntype UV_SkillsProps = CompositeScreenProps<\n  BottomTabScreenProps<UserViewParamList, \"Skills\">,\n  UserViewProps\n>;\n\nconst SignedInStackNav = createNativeStackNavigator();\n\nconst SignedInNavigator = () => {\n  return (\n    <SignedInStackNav.Navigator\n      initialRouteName=\"Tabs\"\n      screenOptions={{ headerShown: false }}\n    >\n      <SignedInStackNav.Screen\n        name=\"Tabs\"\n        component={SignedInTabs}\n        options={{ title: \"Tabs\" }}\n      />\n      <SignedInStackNav.Screen\n        name=\"JoinProject\"\n        component={JoinProjectScreen}\n        options={{ title: \"Join a project\" }}\n      />\n      <SignedInStackNav.Screen\n        name=\"CreateProject\"\n        component={CreateProjectScreen}\n        options={{ title: \"Create a project\" }}\n      />\n      <SignedInStackNav.Screen\n        name=\"Project\"\n        component={ProjectScreen}\n        options={{ title: \"Project\" }}\n      />\n    </SignedInStackNav.Navigator>\n  );\n};\n\nconst SignedInTabNav = createBottomTabNavigator();\n\ntype SignedInTabsProps = NativeStackScreenProps<SignedInParamList, \"Tabs\">;\nconst SignedInTabs = ({ route, navigation }: SignedInTabsProps) => {\n  return (\n    <SignedInTabNav.Navigator initialRouteName=\"Joined\">\n      <SignedInTabNav.Screen\n        name=\"Joined\"\n        component={JoinedScreen}\n        options={{ title: \"Joined projects\" }}\n      />\n      <SignedInTabNav.Screen\n        name=\"Managed\"\n        component={ManagedScreen}\n        options={{ title: \"Managed projects\" }}\n      />\n      <SignedInTabNav.Screen\n        name=\"Account\"\n        component={AccountScreen}\n        options={{ title: \"Account\" }}\n      />\n    </SignedInTabNav.Navigator>\n  );\n};\n\nconst useForceUpdate = () => {\n  const [counter, setCounter] = useState(0);\n  const update = () => {\n    setCounter(counter + 1);\n  };\n  return [counter, update] as [number, () => void];\n};\n\nconst useUserData = () => {\n  const [updateValue, forceUpdate] = useForceUpdate();\n  const username = useSelector((state: State) => state.auth.username);\n  const [userData, setUserData] = useState<any>(null);\n\n  useEffect(() => {\n    (async () => {\n      const ref = doc(db, \"users\", username!);\n      const userDoc = await getDoc(ref);\n      setUserData(userDoc.data());\n    })();\n  }, [username, updateValue]);\n\n  console.log(userData);\n  return [userData, forceUpdate];\n};\n\nconst useProjectData = () => {\n  const [updateValue, forceUpdate] = useForceUpdate();\n  const curProject = useSelector((state: State) => state.project.curProject);\n  const [projectData, setProjectData] = useState<any>(null);\n\n  useEffect(() => {\n    (async () => {\n      const ref = doc(db, \"projects\", curProject!);\n      const projectDoc = await getDoc(ref);\n      setProjectData(projectDoc.data());\n    })();\n  }, [curProject, updateValue]);\n\n  console.log(projectData);\n  return [projectData, forceUpdate];\n};\n\nconst JoinedScreen = ({ route, navigation }: JoinedProps) => {\n  const [userData, forceUpdate] = useUserData();\n  const [joinedProjects, setJoinedProjects] = useState<any[]>([]);\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button onPress={() => navigation.navigate(\"JoinProject\")} title=\"Join\" />\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (userData) {\n        setJoinedProjects(userData[\"joined\"].map((data: any) => data[\"name\"]));\n      } else {\n        setJoinedProjects([]);\n      }\n    })();\n  }, [userData]);\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem\n      bottomDivider\n      onPress={() => {\n        store.dispatch(setCurProject(item));\n        navigation.navigate(\"Project\");\n      }}\n    >\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={joinedProjects}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n      />\n    </View>\n  );\n};\n\nconst ManagedScreen = ({ route, navigation }: ManagedProps) => {\n  const [userData, forceUpdate] = useUserData();\n  const [managedProjects, setManagedProjects] = useState<any[]>([]);\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button\n        onPress={() => navigation.navigate(\"CreateProject\")}\n        title=\"Create\"\n      />\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (userData) {\n        const projects: any[] = [];\n        for (const name of userData[\"managed\"]) {\n          const ref = doc(db, \"projects\", name);\n          const projectData: any = (await getDoc(ref)).data();\n          projects.push(projectData[\"name\"]);\n        }\n        setManagedProjects(projects);\n      } else {\n        setManagedProjects([]);\n      }\n    })();\n  }, [userData]);\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem\n      bottomDivider\n      onPress={() => {\n        store.dispatch(setCurProject(item));\n        navigation.navigate(\"Project\");\n      }}\n    >\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={managedProjects}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n      />\n    </View>\n  );\n};\n\nconst AccountScreen = ({ route, navigation }: AccountProps) => {\n  const [userData, forceUpdate] = useUserData();\n  const username: string | null = userData && userData[\"username\"];\n  const [bio, setBio] = useState(\"\");\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button\n        onPress={async () => {\n          const ref = doc(db, \"users\", username!);\n          await setDoc(ref, { bio: bio }, { merge: true });\n        }}\n        title=\"Commit\"\n      />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (userData) {\n        setBio(userData[\"bio\"]);\n      } else {\n        setBio(\"\");\n      }\n    })();\n  }, [userData]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <Text>Username: {username} </Text>\n      <TextInput value={bio} onChangeText={setBio} placeholder=\"Bio\" />\n      <Button\n        title=\"Sign out\"\n        onPress={() => {\n          store.dispatch(signOut());\n        }}\n      />\n    </View>\n  );\n};\n\nconst JoinProjectStack = createNativeStackNavigator();\n\ntype JoinProjectParamList = {\n  JoinProjectInner: undefined;\n};\n\ntype JoinProjectInnerProps = NativeStackScreenProps<\n  JoinProjectParamList,\n  \"JoinProjectInner\"\n>;\n\nconst JoinProjectScreen = ({ route, navigation }: JoinProjectProps) => {\n  return (\n    <JoinProjectStack.Navigator>\n      <JoinProjectStack.Screen\n        name=\"JoinProjectInner\"\n        component={JoinProjectInnerScreen}\n        options={{ title: \"Join a project\" }}\n      />\n    </JoinProjectStack.Navigator>\n  );\n};\n\nconst JoinProjectInnerScreen = ({\n  route,\n  navigation,\n}: JoinProjectInnerProps) => {\n  const username = useSelector((state: State) => state.auth.username);\n  const [name, setName] = useState(\"\");\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput\n        value={name}\n        onChangeText={setName}\n        placeholder=\"Project name\"\n      />\n      <Button\n        title=\"Join\"\n        disabled={name === \"\"}\n        onPress={async () => {\n          const projectRef = doc(db, \"projects\", name);\n          const userRef = doc(db, \"users\", username!);\n\n          const projectData: any = (await getDoc(projectRef)).data();\n          const currentMembers: string[] = projectData[\"members\"];\n          await setDoc(\n            projectRef,\n            { members: currentMembers.concat(username!) },\n            { merge: true }\n          );\n\n          const userData: any = (await getDoc(userRef)).data();\n          const currentJoined: any[] = userData[\"joined\"];\n          const data = { name: name, team: null };\n          await setDoc(\n            userRef,\n            { joined: currentJoined.concat(data) },\n            { merge: true }\n          );\n\n          navigation.goBack();\n        }}\n      />\n    </View>\n  );\n};\n\nconst CreateProjectStack = createNativeStackNavigator();\n\ntype CreateProjectParamList = {\n  CreateProjectInner: undefined;\n};\n\ntype CreateProjectInnerProps = NativeStackScreenProps<\n  CreateProjectParamList,\n  \"CreateProjectInner\"\n>;\n\nconst CreateProjectScreen = ({ route, navigation }: CreateProjectProps) => {\n  return (\n    <CreateProjectStack.Navigator>\n      <CreateProjectStack.Screen\n        name=\"CreateProjectInner\"\n        component={CreateProjectInnerScreen}\n        options={{ title: \"Create a project\" }}\n      />\n    </CreateProjectStack.Navigator>\n  );\n};\n\nconst CreateProjectInnerScreen = ({\n  route,\n  navigation,\n}: CreateProjectInnerProps) => {\n  const username = useSelector((state: State) => state.auth.username);\n  const [name, setName] = useState(\"\");\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput\n        value={name}\n        onChangeText={setName}\n        placeholder=\"Project name\"\n      />\n      <Button\n        title=\"Create\"\n        disabled={name === \"\"}\n        onPress={async () => {\n          const projectRef = doc(db, \"projects\", name);\n          const userRef = doc(db, \"users\", username!);\n\n          const projectData = {\n            name: name,\n            members: [],\n            skills: [],\n            admin: username!,\n          };\n          await setDoc(projectRef, projectData);\n\n          const userData: any = (await getDoc(userRef)).data();\n          const currentManaged: string[] = userData[\"managed\"];\n          await setDoc(\n            userRef,\n            { managed: currentManaged.concat(name) },\n            { merge: true }\n          );\n\n          navigation.goBack();\n        }}\n      />\n    </View>\n  );\n};\n\nconst ProjectScreenNav = createNativeStackNavigator();\n\nconst ProjectScreen = ({ route, navigation }: ProjectProps) => {\n  const [projectData, _] = useProjectData();\n  const username = useSelector((state: State) => state.auth.username);\n  const isAdmin = projectData && projectData[\"admin\"] === username!;\n\n  return projectData ? (\n    <ProjectScreenNav.Navigator screenOptions={{ headerShown: false }}>\n      {isAdmin ? (\n        <ProjectScreenNav.Screen name=\"AdminView\" component={AdminViewScreen} />\n      ) : (\n        <ProjectScreenNav.Screen name=\"UserView\" component={UserViewScreen} />\n      )}\n    </ProjectScreenNav.Navigator>\n  ) : (\n    <View></View>\n  );\n};\n\nconst AdminViewNav = createNativeStackNavigator();\n\nconst AdminViewScreen = ({ route, navigation }: AdminViewProps) => {\n  return (\n    <AdminViewNav.Navigator screenOptions={{ headerShown: false }}>\n      <AdminViewNav.Screen name=\"AV_Tabs\" component={AV_TabsScreen} />\n      <AdminViewNav.Screen name=\"CreateTeam\" component={CreateTeamScreen} />\n      <AdminViewNav.Screen name=\"AV_Team\" component={AV_TeamScreen} />\n      <AdminViewNav.Screen name=\"AddSkill\" component={AddSkillScreen} />\n    </AdminViewNav.Navigator>\n  );\n};\n\nconst AdminViewTab = createBottomTabNavigator();\n\nconst AV_TabsScreen = ({ route, navigation }: AV_TabsProps) => {\n  return (\n    <AdminViewTab.Navigator>\n      <AdminViewTab.Screen\n        name=\"Members\"\n        component={AV_MembersScreen}\n        options={{ title: \"Project members\" }}\n      />\n      <AdminViewTab.Screen\n        name=\"Teams\"\n        component={AV_TeamsScreen}\n        options={{ title: \"Teams\" }}\n      />\n      <AdminViewTab.Screen\n        name=\"AllSkills\"\n        component={AV_AllSkillsScreen}\n        options={{ title: \"All skills\" }}\n      />\n    </AdminViewTab.Navigator>\n  );\n};\n\nconst AV_MembersScreen = ({ route, navigation }: AV_MembersProps) => {\n  const [projectData, _] = useProjectData();\n  const members = projectData ? projectData[\"members\"] : [];\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem bottomDivider>\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={members}\n        renderItem={renderItem}\n        keyExtractor={(item) => item}\n      />\n    </View>\n  );\n};\n\nconst AV_TeamsScreen = ({ route, navigation }: AV_TeamsProps) => {\n  const [projectData, forceUpdate] = useProjectData();\n  const projectName = projectData && projectData[\"name\"];\n  const [teams, setTeams] = useState<any[]>([]);\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button\n        onPress={() => navigation.navigate(\"CreateTeam\")}\n        title=\"Create\"\n      />\n      <Button onPress={() => {}} title=\"Fill\" />\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() =>\n    navigation.setOptions({\n      headerRight: header,\n    })\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (projectData) {\n        const ref = collection(db, \"projects\", projectName, \"teams\");\n        const res = await getDocs(ref);\n        const teams_ = res.docs.map((doc) => doc.data()[\"name\"]);\n        setTeams(teams_);\n      } else {\n        setTeams([]);\n      }\n    })();\n  }, [projectData]);\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem\n      bottomDivider\n      onPress={() => {\n        store.dispatch(setSelTeam(item));\n        navigation.navigate(\"AV_Team\");\n      }}\n    >\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={teams}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n      />\n    </View>\n  );\n};\n\nconst AV_AllSkillsScreen = ({ route, navigation }: AV_AllSkillsProps) => {\n  const [projectData, forceUpdate] = useProjectData();\n  const [skills, setSkills] = useState<any[]>([]);\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button onPress={() => navigation.navigate(\"AddSkill\")} title=\"Add\" />\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    if (projectData) {\n      setSkills(projectData[\"skills\"]);\n    } else {\n      setSkills([]);\n    }\n  }, [projectData]);\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem bottomDivider>\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={skills}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n      />\n    </View>\n  );\n};\n\nconst CreateTeamNav = createNativeStackNavigator();\n\ntype CreateTeamParamList = {\n  CreateTeamInner: undefined;\n};\n\ntype CreateTeamInnerProps = NativeStackScreenProps<\n  CreateTeamParamList,\n  \"CreateTeamInner\"\n>;\n\nconst CreateTeamScreen = ({ route, navigation }: CreateTeamProps) => {\n  return (\n    <CreateTeamNav.Navigator>\n      <CreateTeamNav.Screen\n        name=\"CreateTeamInner\"\n        component={CreateTeamInnerScreen}\n        options={{ title: \"Create a team\" }}\n      />\n    </CreateTeamNav.Navigator>\n  );\n};\n\nconst CreateTeamInnerScreen = ({ route, navigation }: CreateTeamInnerProps) => {\n  const projectName = useSelector((state: State) => state.project.curProject);\n  const [teamName, setTeamName] = useState(\"\");\n  const [numMembers, setNumMembers] = useState(\"\");\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput\n        value={teamName}\n        onChangeText={setTeamName}\n        placeholder=\"Team name\"\n      />\n      <TextInput\n        value={numMembers}\n        onChangeText={setNumMembers}\n        placeholder=\"# of members\"\n      />\n      <Button\n        title=\"Create\"\n        disabled={teamName === \"\" || numMembers === \"\"}\n        onPress={async () => {\n          const ref = doc(db, \"projects\", projectName!, \"teams\", teamName);\n          const data = {\n            name: teamName,\n            numMembers: parseInt(numMembers),\n            members: [],\n          };\n          await setDoc(ref, data);\n\n          navigation.goBack();\n        }}\n      />\n    </View>\n  );\n};\n\nconst AV_TeamTab = createBottomTabNavigator();\n\ntype AV_TeamParamList = {\n  AV_Team_Members: undefined;\n  AV_Team_Info: undefined;\n};\n\ntype AV_Team_MembersProps = BottomTabScreenProps<\n  AV_TeamParamList,\n  \"AV_Team_Members\"\n>;\ntype AV_Team_InfoProps = BottomTabScreenProps<AV_TeamParamList, \"AV_Team_Info\">;\n\nconst AV_TeamScreen = ({ route, navigation }: AV_TeamProps) => {\n  return (\n    <AV_TeamTab.Navigator>\n      <AV_TeamTab.Screen\n        name=\"AV_Team_Members\"\n        component={AV_Team_MembersScreen}\n        options={{ title: \"Team members\" }}\n      />\n      <AV_TeamTab.Screen\n        name=\"AV_Team_Info\"\n        component={AV_Team_InfoScreen}\n        options={{ title: \"Team info\" }}\n      />\n    </AV_TeamTab.Navigator>\n  );\n};\n\nconst useTeamData = () => {\n  const [updateValue, forceUpdate] = useForceUpdate();\n  const curProject = useSelector((state: State) => state.project.curProject);\n  const selTeam = useSelector((state: State) => state.project.selTeam);\n  const [teamData, setTeamData] = useState<any>(null);\n\n  useEffect(() => {\n    (async () => {\n      if (curProject && selTeam) {\n        const ref = doc(db, \"projects\", curProject!, \"teams\", selTeam!);\n        const teamDoc = await getDoc(ref);\n        setTeamData(teamDoc.data());\n      } else {\n        setTeamData(null);\n      }\n    })();\n  }, [curProject, selTeam, updateValue]);\n\n  console.log(teamData);\n  return [teamData, forceUpdate];\n};\n\nconst AV_Team_MembersScreen = ({ route, navigation }: AV_Team_MembersProps) => {\n  const [teamData, forceUpdate] = useTeamData();\n  const [members, setMembers] = useState<string[]>([]);\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    async () => {\n      if (teamData) {\n        setMembers(teamData[\"members\"]);\n      } else {\n        setMembers([]);\n      }\n    };\n  }, [teamData]);\n\n  const renderItem: ListRenderItem<string> = ({ item }) => (\n    <ListItem bottomDivider>\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={members}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n      />\n    </View>\n  );\n};\n\nconst AV_Team_InfoScreen = ({ route, navigation }: AV_Team_InfoProps) => {\n  return <View></View>;\n};\n\nconst AddSkillStack = createNativeStackNavigator();\n\ntype AddSkillParamList = {\n  AddSkillInner: undefined;\n};\n\ntype AddSkillInnerProps = NativeStackScreenProps<\n  AddSkillParamList,\n  \"AddSkillInner\"\n>;\n\nconst AddSkillScreen = ({ route, navigation }: AddSkillProps) => {\n  return (\n    <AddSkillStack.Navigator>\n      <AddSkillStack.Screen\n        name=\"AddSkillInner\"\n        component={AddSkillInnerScreen}\n        options={{ title: \"Add a skill\" }}\n      />\n    </AddSkillStack.Navigator>\n  );\n};\n\nconst AddSkillInnerScreen = ({ route, navigation }: AddSkillInnerProps) => {\n  const [name, setName] = useState(\"\");\n  const [projectData, _] = useProjectData();\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <TextInput value={name} onChangeText={setName} placeholder=\"Skill name\" />\n      <Button\n        title=\"Add\"\n        disabled={name === \"\"}\n        onPress={async () => {\n          if (projectData) {\n            const projectName = projectData[\"name\"];\n            const ref = doc(db, \"projects\", projectName);\n            const skills = projectData[\"skills\"] as any[];\n\n            await setDoc(ref, { skills: skills.concat(name) }, { merge: true });\n\n            navigation.goBack();\n          }\n        }}\n      />\n    </View>\n  );\n};\n\nconst UserViewTab = createBottomTabNavigator();\n\nconst UserViewScreen = ({ route, navigation }: UserViewProps) => {\n  return (\n    <UserViewTab.Navigator>\n      <UserViewTab.Screen\n        name=\"Team\"\n        component={UV_TeamScreen}\n        options={{ title: \"Team\" }}\n      />\n      <UserViewTab.Screen\n        name=\"Swipe\"\n        component={UV_SwipeScreen}\n        options={{ headerShown: false }}\n      />\n      <UserViewTab.Screen\n        name=\"Skills\"\n        component={UV_SkillsScreen}\n        options={{ title: \"Skills\" }}\n      />\n    </UserViewTab.Navigator>\n  );\n};\n\nconst UV_SwipeScreen = ({ route, navigation }: UV_SwipeProps) => {\n  const [userData, forceUpdateU] = useUserData();\n  const username = userData && userData[\"username\"];\n  const [projectData, forceUpdateP] = useProjectData();\n  const members =\n    projectData && projectData[\"members\"].filter((x: string) => x !== username);\n\n  const [membersInfo, setMembersInfo] = useState<any[]>([]);\n  useEffect(() => {\n    (async () => {\n      if (members) {\n        const a = [];\n        for (const name of members) {\n          const fellowUserDoc = await getDoc(doc(db, \"users\", name));\n          const fellowUserData: any = fellowUserDoc.data();\n          a.push({ username: name, bio: fellowUserData[\"bio\"] });\n        }\n        setMembersInfo(a);\n      } else {\n        setMembersInfo([]);\n      }\n    })();\n  }, [userData, projectData]);\n\n  const renderCard = (info: any) =>\n    info ? (\n      <View\n        testID={info.username}\n        key={info.username}\n        style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}\n      >\n        <Text>Username: {info.username}</Text>\n        <Text>Bio: {info.bio}</Text>\n      </View>\n    ) : (\n      <View />\n    );\n\n  console.log(membersInfo);\n  return (\n    <Swiper cards={membersInfo} renderCard={renderCard} verticalSwipe={false} />\n  );\n};\n\nconst UV_TeamScreen = ({ route, navigation }: UV_TeamProps) => {\n  return <View></View>;\n};\n\nconst UV_SkillsScreen = ({ route, navigation }: UV_SkillsProps) => {\n  const [projectData, forceUpdate] = useProjectData();\n  const [skills, setSkills] = useState<any[]>([]);\n  const [checked, setChecked] = useState<boolean[]>([]);\n  const [updateValue, forceUpdateV] = useForceUpdate();\n\n  const header = () => (\n    <View style={{ flex: 1, flexDirection: \"row\" }}>\n      <Button onPress={() => {}} title=\"Commit\" />\n      <Button onPress={forceUpdate} title=\"Refresh\" />\n    </View>\n  );\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: header,\n    });\n  });\n\n  useEffect(() => {\n    if (projectData) {\n      setSkills(projectData[\"skills\"]);\n      const checked_ = [];\n      for (const skill of projectData[\"skills\"]) {\n        checked_.push(false);\n      }\n      setChecked(checked_);\n    } else {\n      setSkills([]);\n      setChecked([]);\n    }\n  }, [projectData]);\n\n  const renderItem: ListRenderItem<string> = ({ item, index }) => (\n    <ListItem bottomDivider>\n      <ListItem.Content>\n        <Text>{item}</Text>\n      </ListItem.Content>\n      <ListItem.CheckBox\n        checked={checked[index]}\n        onPress={() => {\n          checked[index] = !checked[index];\n          setChecked(checked);\n          forceUpdateV();\n        }}\n      />\n    </ListItem>\n  );\n\n  return (\n    <View>\n      <FlatList\n        data={skills}\n        renderItem={renderItem}\n        keyExtractor={(name) => name}\n        extraData={updateValue}\n      />\n    </View>\n  );\n};\n\nconst Root = () => {\n  const signedIn = useSelector((state: State) => state.auth.signedIn);\n  return (\n    <NavigationContainer>\n      {signedIn ? <SignedInNavigator /> : <NotSignedInNavigator />}\n    </NavigationContainer>\n  );\n};\n\nconst App = () => {\n  return (\n    <SafeAreaProvider>\n      <Provider store={store}>\n        <Root />\n      </Provider>\n    </SafeAreaProvider>\n  );\n};\n\nexport default App;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}